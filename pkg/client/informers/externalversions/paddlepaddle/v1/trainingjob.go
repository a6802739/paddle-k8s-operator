// Copyright 2019 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was automatically generated by informer-gen

package v1

import (
	paddlepaddle_v1 "github.com/paddlepaddle/paddlejob/pkg/apis/paddlepaddle/v1"
	versioned "github.com/paddlepaddle/paddlejob/pkg/client/clientset/versioned"
	internalinterfaces "github.com/paddlepaddle/paddlejob/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/paddlepaddle/paddlejob/pkg/client/listers/paddlepaddle/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// PaddleJobInformer provides access to a shared informer and lister for
// PaddleJobs.
type PaddleJobInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.PaddleJobLister
}

type trainingJobInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewPaddleJobInformer constructs a new informer for PaddleJob type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPaddleJobInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.PaddlepaddleV1().PaddleJobs(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.PaddlepaddleV1().PaddleJobs(namespace).Watch(options)
			},
		},
		&paddlepaddle_v1.PaddleJob{},
		resyncPeriod,
		indexers,
	)
}

func defaultPaddleJobInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewPaddleJobInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *trainingJobInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&paddlepaddle_v1.PaddleJob{}, defaultPaddleJobInformer)
}

func (f *trainingJobInformer) Lister() v1.PaddleJobLister {
	return v1.NewPaddleJobLister(f.Informer().GetIndexer())
}
